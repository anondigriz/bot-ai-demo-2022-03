from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters
from telegram import Update
import logging
import os
from recognizer import *

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)


def start(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id, text="–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤. –ñ–¥—É –æ—Ç —Ç–µ–±—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ‚ù§Ô∏è")


def echo(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id, text="–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üòÑ")


def document(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id, text="–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∂–∞—Ç—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é ü§®")


def photo(update: Update, context: CallbackContext):
    full_path = None
    prediction = "¬Ø\_(„ÉÑ)_/¬Ø"
    try:
        file = context.bot.getFile(update.message.photo[-1].file_id)
        full_path = save_tmp_photo(file.file_path)
        prediction = recognize_flower(full_path)
    except Exception as ex:
        print(ex)
    finally:
        if full_path != None:
            remove_tmp_photo(full_path)

    context.bot.send_message(
        chat_id=update.effective_chat.id, text=f"–Ø –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ {prediction} üòç")


if __name__ == "__main__":
    updater = Updater(token=TELEGRAM_BOT_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(MessageHandler(Filters.text, echo))
    dispatcher.add_handler(MessageHandler(Filters.document, document))
    dispatcher.add_handler(MessageHandler(Filters.photo, photo))

    updater.start_polling()
